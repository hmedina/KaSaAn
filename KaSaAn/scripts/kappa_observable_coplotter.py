#! /usr/bin/env python3
"""
Plot a variable from several output files.

``` {.text}
usage: kappa_observable_coplotter [-h] -p PATTERN [-vi VARIABLE_BY_INDEX] [-vn VARIABLE_BY_NAME] [-ve VARIABLE_EXPRESSION] [-o OUT_FILE] [-d] [-fs WIDTH HEIGHT] [--limit_left LIMIT_LEFT] [--limit_right LIMIT_RIGHT] [--limit_bottom LIMIT_BOTTOM] [--limit_top LIMIT_TOP] [-lx] [-ly] [-nl] [-ts TEXT_SIZE]
[-h]                            Show detailed help.
-p PATTERN                      Pattern matching desired files.
[-vi VARIABLE_BY_INDEX]         Index of the variable to be co-plotted.
[-vn VARIABLE_BY_NAME]          Name of the variable to be co-plotted.
[-ve VARIABLE_EXPRESSION]       Algebraic expression of variable names.
[-o OUT_FILE]                   If given, save plot to file; else show.
[-d]                            If passed, plot discrete differential over time.
[-fs WIDTH HEIGHT]              Size of the resulting figure, in inches.
[--limit_left X_MIN]            Override left limit of plot.
[--limit_right X_MAX]           Override right limit of plot.
[--limit_bottom Y_MIN]          Override bottom limit of plot.
[--limit_top Y_MAX]             Override top limit of plot.
[-lx]                           Plot the X axis in logarithmic scale.
[-ly]                           Plot the Y axis in logarithmic scale.
[-nl]                           Do not insert a legend with filenames.
[-ts TEXT_SIZE]                 Override default size for text, in points.
[--legend_loc {...} ]           Specify legend location; <outside> options plot outside axes. Options are:
                                    upper left, upper center, upper right,
                                    center left, center, center right,
                                    lower left, lower center, lower right,
                                    outside left upper, outside right upper,
                                    outside left lower, outside right lower
[--legend_ncol LEGEND_NCOL]     Number of columns for the legend.
```
"""

import matplotlib as mpl
import matplotlib.pyplot as plt
from argparse import ArgumentParser
from pathlib import Path
from KaSaAn.functions import observable_coplot_axis_annotator


def main():
    """Co-plot the same variable from multiple files, save as file or display the figure."""
    parser = ArgumentParser(description=main.__doc__)
    parser.add_argument('-p', '--pattern', type=str, required=True,
                        help='Pattern, passed to glob.glob that would match the desired files to co-plot, should'
                             ' probably be quoted.')
    parser.add_argument('-vi', '--variable_by_index', type=int, default=None,
                        help='Index of the variable to be co-plotted. Index is the order of declaration (i.e. var #1'
                             ' plot is observable #1), or column as printed in the out_file.csv from KaSim (i.e. var #1'
                             ' plots column #1).')
    parser.add_argument('-vn', '--variable_by_name', type=str, default='',
                        help='Name of the variable to be co-plotted.')
    parser.add_argument('-ve', '--variable_expression', type=str, default='',
                        help='A string with one algebraic expression using variable names held in the file'
                             ' (e.g. -ve "1 - (\'Axn.Axn\' + \'Axn_mono\' ) / \'Axn\'")')
    parser.add_argument('-o', '--out_file', type=Path, default=None,
                        help='Name of the file where the figure should be saved. If left blank or omitted, the figure'
                             ' will be shown instead.')
    parser.add_argument('-d', '--differential', action='store_true',
                        help="If passed, variable will be derived using numpy's diff method; useful for getting a rate"
                             " out of a counter generated by a rule's firing.")
    parser.add_argument('-fs', '--figure_size', type=float, default=mpl.rcParams['figure.figsize'], nargs=2,
                        help='Size of the resulting figure, in inches, specified as two elements, width and height'
                             ' (text size is specified in points, so this affects the size of text relative to other'
                             ' graph elements).')
    parser.add_argument('--limit_left', type=float, default=None,
                        help='Override the left limit of the plot. If the left limit is greater than the right limit,'
                             ' X-axis values will decrease from left to right.')
    parser.add_argument('--limit_right', type=float, default=None,
                        help='Override the right limit of the plot.')
    parser.add_argument('--limit_bottom', type=float, default=None,
                        help='Override the bottom limit of the plot. If the bottom limit is greater than the top'
                        ' limit, Y-axis values will decrease from bottom to top.')
    parser.add_argument('--limit_top', type=float, default=None,
                        help='Override the top limit of the plot.')
    parser.add_argument('-lx', '--log_x', action='store_true',
                        help='Plot the X axis in logarithmic scale.')
    parser.add_argument('-ly', '--log_y', action='store_true',
                        help='Plot the Y axis in logarithmic scale.')
    parser.add_argument('-nl', '--no_legend', action='store_true',
                        help='Do not insert a legend with the filenames.')
    parser.add_argument('--legend_loc', type=str, choices=[
        'upper left', 'upper center', 'upper right',
        'center left', 'center', 'center right',
        'lower left', 'lower center', 'lower right',
        'outside right upper', 'outside right lower', 'outside left upper', 'outside left lower'],
                        help='Override location of the legend. Options prefixed with <outside> plot outside the axes.')
    parser.add_argument('--legend_ncol', type=int, default=1,
                        help='Number of columns for the legend.')
    parser.add_argument('-ts', '--text_size', type=int,
                        help="If given, set point size for all text elements, overriding MatPlotLib's default.")
    args = parser.parse_args()

    if args.text_size:
        mpl.rcParams['font.size'] = args.text_size

    fig, ax = plt.subplots(figsize=args.figure_size, layout='constrained')
    observable_coplot_axis_annotator(target_axis=ax,
                                     file_pattern=args.pattern,
                                     variable_index=args.variable_by_index,
                                     variable_name=args.variable_by_name,
                                     variable_expr=args.variable_expression,
                                     differential_toggle=args.differential,
                                     log_axis_x=args.log_x,
                                     log_axis_y=args.log_y,
                                     no_legend=True)

    if not args.no_legend:
        if args.legend_loc is not None:
            fig.legend(loc=args.legend_loc, ncol=args.legend_ncol)
        else:
            ax.legend(loc='best', ncol=args.legend_ncol)

    ax.set_xlim(left=args.limit_left, right=args.limit_right)
    ax.set_ylim(bottom=args.limit_bottom, top=args.limit_top)
    if args.out_file:
        if not args.out_file.parent.exists():
            args.out_file.parent.mkdir(parents=True)
        fig.savefig(fname=args.out_file)
    else:
        plt.show()


if __name__ == '__main__':
    main()
