#!/usr/bin/env python3
"""
Plot a trace file produced by KaSim.

``` {.text}
usage: kappa_observable_plotter
[-h]                    Show detailed help.
[-i INPUT_FILE_NAME]    File to be plotted, <data.csv> if omitted.
[-o OUTPUT_FILE_NAME]   If given, save plot to file; else show.
[-p FILE_NAME]          Dump ordered observables to file, one per line, for indexing.
[-vi [...]]             The list of observable indexes to be plotted; all if omitted.
[-vn [...]]             The name of observables to be plotted; all if omitted.
[-fs WIDTH HEIGHT]      Size of the resulting figure, in inches.
[-dpi DOTS_PER_INCH]    Resolution of the figure, specified as dots per inch.
[-d]                    If passed, plot discrete differential over time.
[-lx]                   Plot the X axis in logarithmic scale.
[-ly]                   Plot the Y axis in logarithmic scale.
```
"""

import argparse
import matplotlib as mpl
import matplotlib.pyplot as plt
from KaSaAn.functions import observable_file_reader, observable_list_axis_annotator


def main():
    """Plot a trace file produced by KaSim."""
    parser = argparse.ArgumentParser(description=main.__doc__)
    parser.add_argument('-i', '--input_file_name', type=str, default='data.csv',
                        help='Name of the file with the time series traces to be plotted. By default it will look for'
                             ' <data.csv>')
    parser.add_argument('-o', '--output_file_name', type=str, default=None,
                        help='Name of the file to where the figure should be saved; displayed if not specified.')
    parser.add_argument('-p', '--print_observables_to_file', type=str, default='',
                        help="If specified, dump the list of observables to a file, one per line, so that the line"
                             " number corresponds to the observable's index.")
    parser.add_argument('-vi', '--variable_indexes', type=int, default=None, nargs='*',
                        help='The list of variable / observable indexes that should be plotted. Observables are plotted'
                             ' in their declaration order, see option <-p> to print their order. If neither <-vi> nor'
                             ' <-vn> are specified, all variables will be plotted. Options <-vi> and <-vn> can be '
                             'called together, and their set will be plotted.')
    parser.add_argument('-vn', '--variable_names', type=str, default='', nargs='*',
                        help='List of variable names that should be plotted. If neither <-vi> nor <-vn> are specified,'
                             ' all variables will be plotted. Options <-vi> and <-vn> can be called together, and their'
                             ' set will be plotted.')
    parser.add_argument('-fs', '--fig_size', type=float, default=mpl.rcParams['figure.figsize'], nargs=2,
                        help='Size of the resulting figure, in inches, specified as two elements, width and height '
                             '(text size is specified in points, so this affects the size of text relative to other'
                             ' graph elements).')
    parser.add_argument('-dpi', '--dots_per_inch', type=float, default=mpl.rcParams['figure.dpi'],
                        help='Resolution of the figure, specified as dots per inch.')
    parser.add_argument('-d', '--differential', action='store_true',
                        help="If passed, variables will be derived using numpy's diff method; useful for getting a rate"
                             " out of a counter generated by a rule's firing.")
    parser.add_argument('-lx', '--log_x', action='store_true',
                        help='Plot the X axis in logarithmic scale.')
    parser.add_argument('-ly', '--log_y', action='store_true',
                        help='Plot the Y axis in logarithmic scale.')
    args = parser.parse_args()

    # parse data
    this_data = observable_file_reader(args.input_file_name)
    fig, ax = plt.subplots(figsize=args.fig_size, dpi=args.dots_per_inch)
    observable_list_axis_annotator(obs_axis=ax, data=this_data,
                                   vars_indexes=args.variable_indexes, vars_names=args.variable_names,
                                   diff_toggle=args.differential, axis_x_log=args.log_x, axis_y_log=args.log_y)

    # print out observables
    if args.print_observables_to_file:
        with open(args.print_observables_to_file, 'w') as file:
            for obs in this_data[0]:
                file.write(obs + '\n')

    # save or display the figure
    if args.output_file_name:
        plt.tight_layout()
        fig.savefig(fname=args.output_file_name)
    else:
        plt.show()


if __name__ == '__main__':
    main()
