#!/usr/bin/env python3

import argparse
import sys
import matplotlib.pyplot as plt

from KaSaAn.functions import render_snapshot


def main(args=None):
    if args is None:
        args = sys.argv[1:]
    parser = argparse.ArgumentParser(description='Visualize a kappa snapshot using a patchwork layout, where the area '
                                                 'colored is proportional to the metric assayed. Metrics supported are '
                                                 'mass (default), size, or count of each molecular species. Composition '
                                                 'of each species is also displayed.')
    parser.add_argument('-sf', '--snapshot_file', type=str, required=True,
                        help='Name of the snapshot file to be viewed.')
    parser.add_argument('-cs', '--coloring_scheme', type=dict,
                        help='Optional dictionary with color scheme to use for species composition. If not provided, '
                             'one will be generated. It /may/ not match one generated by a different snapshot.')
    parser.add_argument('-vm', '--visualization_mode', choices=['all', 'mass', 'count', 'size'], type=str,
                        default='all',
                        help='Type of visualization: size displays biggest species largest; '
                             'count displays most abundant species largest; mass is the '
                             'product of size times abundance, indicative of "where is the '
                             'bulk of my system".')
    parser.add_argument('-of', '--output_file', type=str,
                        help='Optional name of file to save the view to instead of displaying it on screen. Extension'
                             ' dictates the format. Valid choices include PNG, PDF, SVG (anything supported by'
                             ' MatPlotLib).')
    args = parser.parse_args()

    fig = render_snapshot(snapshot_file=args.snapshot_file,
                          color_scheme=args.coloring_scheme,
                          vis_mode=args.visualization_mode)

    # Either save figure to file, or plot it
    if args.output_file:
        plt.savefig(args.output_file, bbox_inches='tight')
    else:
        plt.show()


if __name__ == '__main__':
    main()