#! /usr/bin/env python3

import argparse
import matplotlib as mpl
import matplotlib.pyplot as plt
from KaSaAn.core import KappaAgent, KappaSnapshot
from KaSaAn.functions import render_snapshot_as_plain_graph


def main():
    parser = argparse.ArgumentParser(description='Visualize a kappa snapshot using a plain graph.')
    parser.add_argument('-sf', '--snapshot_file_name', type=str, required=True,
                        help='Name of the snapshot file to be viewed.')
    parser.add_argument('-cs', '--coloring_scheme', type=str, default='',
                        help='Optional file containing a dictionary with color scheme to use for species composition.'
                             ' E.g. <{"Bob": #fff, "Mary": #999, "Sue": #222}>, where the color can be anything'
                             ' converable to a color by MatPlotLib (e.g. RGB[A] tuples, hex-strings, XKCD colors...).'
                             ' If not provided, one will be generated, but bear in mind it is unlikely to match one'
                             ' generated by a different snapshot.')
    parser.add_argument('-p', '--highlight_patterns', nargs='*', type=str,
                        help='Nodes whose agents contain any of these patters will be colored according to the coloring'
                             ' scheme, all other agents will be transparent; edges will be partially opaque. ')
    parser.add_argument('-of', '--output_file', type=str,
                        help='Optional name of file to save the view to instead of displaying it on screen. Extension'
                             ' dictates the format. Valid choices include PNG, PDF, SVG (anything supported by'
                             ' MatPlotLib).')
    parser.add_argument('-fs', '--figure_size', type=float, default=mpl.rcParams['figure.figsize'], nargs=2,
                        help='Size of the resulting figure, in inches, specified as two elements, width and height'
                             ' (text size is specified in points, so this affects the size of text relative to other'
                             ' graph elements).')
    parser.add_argument('-ns', '--node_size', type=int, default=300,
                        help='Size of nodes; default of 300 as used by NetworkX.')
    parser.add_argument('-ew', '--edge_width', type=float, default=1.0,
                        help='Width of edges; default of 1.0 as used by NetworkX.')
    args = parser.parse_args()

    snapshot = KappaSnapshot(snapshot_file_name=args.snapshot_file_name)
    highlight_pattern_list = [KappaAgent(pattern) for pattern in args.highlight_patterns]
    # render graph
    this_figure = render_snapshot_as_plain_graph(snapshot=snapshot, color_scheme_file_name=args.coloring_scheme,
                                                 highlight_patterns=highlight_pattern_list, fig_size=args.figure_size,
                                                 node_size=args.node_size, edge_width=args.edge_width)

    # save or display the figure
    if args.output_file_name:
        this_figure.savefig(fname=args.output_file_name)
    else:
        plt.show()


if __name__ == '__main__':
    main()
